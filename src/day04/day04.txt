jsp指令
	<%@ 指令名 属性名="属性值"%>
	
	include指令
		<%@ include file=".."%>
			将另外一个页面加载到当前页面中
			
		加载方式:
			在转码的时候(jsp--->servlet)将另一个页面中的所有元素直接拷贝到当前页面中

		使用include指令的时候,要注意变量名重复的问题,两个页面不能定义同名的变量
		
jsp动作
	<jsp:动作名 属性名="属性值">
	
	include动作
		<jsp:include page="b.jsp"></jsp:include>
		
	加载方式:
		include(request, response, "b.jsp", out, false)
		在程序运行期间,通过调用include方法将另外一个页面加载到当前页面中
		
		两个页面共享request和response
		
	jsp动作的效率比较高	
	
	
	
jsp九大内置对象
	request
		请求对象
	
	
	response
		响应对象
	
	out
		输出流对象
	
	pageContext
		当前页面的上下文
		只是当前页面
	
	session
		会话
	
	application
		整个应用,相当于ServletContext,servlet上下文
		
	config
		相当于ServletConfig
		
	page
		当前jsp实例,相当于this
		
	exception
		异常对象
		
		errorPage="e2.jsp":指定出现异常后跳转的界面,但是此时并没有能够获取到异常信息
		只有在页面中配置了isErrorPage="true",才能获取到异常的信息
		
		使用的步骤:
			首先在可能会出现异常的界面定义errorPage="e2.jsp",
			告诉服务器,如果该页面出现了异常,跳转到e2.jsp的页面
			如果想要在e2.jsp页面中获取异常信息,
			需要添加一个配置isErrorPage="true"
		
	
		解决全局错误的一些方式
			方式一:根据错误码进行跳转
			<error-page>
			  	<error-code>404</error-code>
			  	<location>/404.jsp</location>
			  </error-page>
			 方式二:根据异常的类型进行跳转
			  <error-page>
			  	<exception-type>java.lang.ArithmeticException</exception-type>
			  	<location>/500.jsp</location>
			  </error-page>
	
	
	jsp四大作用于对象
		作用域				范围
		pageContext			当前页面
		request				同一个请求中
		session				同一个会话中
		application			整个应用
	
	http协议
		是一个无状态协议
		每一次请求需要建立一个新的连接
		用户用完以后会释放这个连接
		服务器不会记录谁曾经访问过
	
		在某些特定情况下需要记住谁曾经访问过
		
		
	cookie技术
		将信息记录在客户端
		
	session技术
		将信息记录在服务器		
		
	cookie
		在客户端保存用户状态的一种管理技术
		当客户端访问服务器的时候,服务器会将少量的数据发送到客户端
		客户端会将这些数据存储到客户端机器的硬盘上
		当客户端再次访问服务器的时候
		会将这些数据发送给服务器
		浏览器会跟服务器进行交互
		这些数据会一直来回的传递
		通过这种方法,来维护用户的状态
		
			
	创建cookie
		Cookie cookie = new Cookie("name", "admin");
		response.addCookie(cookie);
		cookie只在请求头和响应头中传递
		cookie只能保存ISO8859-1编码的数据
	
	
	cookie生存时间
		默认:
			会话结束,浏览器关闭的时候,删除当前保存的cookie
			
		可以设置cookie的生存时间
		setMaxAge(int seconds)参数的单位是秒
	
	
	修改cookie
		实际上就是添加,只是创建了一个同名的cookie,会将之前存在的cookie覆盖
		
		
	删除cookie
		实际上也是添加,只是创建了一个同名的cookie,且将这个cookie的生存时间设置为0
	
	
		
	
	
				
	
	
	
	
	
		